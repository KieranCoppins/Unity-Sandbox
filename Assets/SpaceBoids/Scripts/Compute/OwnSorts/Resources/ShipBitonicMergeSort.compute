#pragma kernel Sort

struct SquadronMemberData
{
    float4x4 mat;
    float3 velocity;
    
    int team;
    int targetId;
    int targetedByCount;

    int dead;
    float lastShotTime;

	int id;
};

RWStructuredBuffer<SquadronMemberData> memberData;
RWStructuredBuffer<int> lastIndices;
RWStructuredBuffer<uint> originalIndices;
const uint numEntries;
const uint groupWidth;
const uint groupHeight;
const uint stepIndex;

const uint stageIndex;
const uint numStages;

// Sort the given entries by their keys (smallest to largest)
// This is done using bitonic merge sort, and takes multiple iterations
[numthreads(128, 1, 1)]
void Sort (uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	uint hIndex = i & (groupWidth - 1);
	uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
	uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
	uint indexRight = indexLeft + rightStepSize;

	// Exit if out of bounds (for non-power of 2 input sizes)
	if (indexRight >= numEntries) return;

	int valueLeft = memberData[indexLeft].dead;
	int valueRight = memberData[indexRight].dead;

	if (valueLeft == 1 && valueRight == 0)
	{
		SquadronMemberData temp = memberData[indexLeft];
		memberData[indexLeft] = memberData[indexRight];
		memberData[indexRight] = temp;
	}

    if (stageIndex == numStages - 1 && stepIndex == stageIndex)
    {
        if (valueLeft == 0)
        {
            InterlockedMax(lastIndices[0], (int)indexLeft);
        }
        if (valueRight == 0)
        {
            InterlockedMax(lastIndices[0], (int)indexRight);
        }
    }
    
    originalIndices[memberData[indexLeft].id] = indexLeft;
    originalIndices[memberData[indexRight].id] = indexRight;
}